/* Autogenerated with kurento-module-creator */

#include "ChangeBackgroundOpenCVImpl.hpp"
#include <KurentoException.hpp>
 using namespace cv;
namespace kurento
{
namespace module
{
namespace changebackground
{

ChangeBackgroundOpenCVImpl::ChangeBackgroundOpenCVImpl ()
{
  printf("Create a Filter.\n");
}

void ChangeBackgroundOpenCVImpl::setImagePath(char* image_path) {
  printf("Debug set image path: 1 %s.\n", image_path);
  background = imread(image_path);
  video.open("/media/output.mp4", VideoWriter::fourcc('H', '2', '6', '4'), 10, background.size());
  if (background.empty()) {
        printf("Error loading background image.\n");
  }
}
/*
 * This function will be called with each new frame. mat variable
 * contains the current frame. You should insert your image processing code
 * here. Any changes in mat, will be sent through the Media Pipeline.
 */

void ChangeBackgroundOpenCVImpl::process (cv::Mat &mat)
{
        cv::Size mat_back_size = mat.size();
        // Check if frame is all black (i.e., has no content)
        Scalar meanColor = mean(mat);
        if (meanColor[0] < 1 && meanColor[1] < 1 && meanColor[2] < 1) {
            resize(mat, mat, background.size());
            cvtColor(mat, mat, background.channels());
            background.copyTo(mat);
            resize(mat, mat, mat_back_size);
            return;
        }

        // Resize frame if larger than background image
        if (mat.cols > background.cols || mat.rows > background.rows) {
            resize(mat, mat, background.size());
        }

        // Calculate position to place the video in the center of the background image
        int startX = (background.cols - mat.cols) / 2;
        int startY = (background.rows - mat.rows) / 2;
        // Define region of interest (ROI) in background image
        Rect roi(startX, startY, mat.cols, mat.rows);

        // Copy frame to ROI in background image
        Mat outputImage = background.clone();
        // In thông tin về vùng cắt (ROI)
        // Kiểm tra xem vùng cắt (ROI) có hợp lệ hay không
        if (roi.x < 0 || roi.y < 0 || roi.width <= 0 || roi.height <= 0 ||
            roi.x + roi.width > outputImage.cols || roi.y + roi.height > outputImage.rows) {
            // Xử lý lỗi ở đây nếu cần
        } else {
          int channel_back = mat.channels();
          if (mat.channels() != outputImage.channels()) {
            //  cvtColor(outputImage, outputImage, COLOR_BGR2RGB);
             cvtColor(mat, mat, outputImage.channels());
          }
            for (int y = 0; y < mat.rows; ++y) {
              for (int x = 0; x < mat.cols; ++x) {
                outputImage.at<Vec3b>(y + startY, x + startX) = mat.at<Vec3b>(y, x);
              }
            }
          // Nếu kích thước không khớp, resize mat để phù hợp với outputImageROI
            cvtColor(outputImage(roi), outputImage(roi), channel_back);
            resize(mat, mat, outputImage.size());
            outputImage.copyTo(mat);
          }
        video.write(mat);
        resize(mat, mat, mat_back_size);
}

} /* changebackground */
} /* module */
} /* kurento */
